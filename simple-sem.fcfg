## Natural Language Toolkit: sem3.fcfg
##
## Alternative simple grammar with transitive verbs and 
## quantifiers for the book. 
## 
## Author: Ewan Klein <ewan@inf.ed.ac.uk> 
## URL: <http://nltk.sourceforge.net>
## For license information, see LICENSE.TXT

## modified by Benjamin Inden, Nottingham Trent University

% start S
############################
# Grammar Rules
#############################

S[SEM = <?subj(?vp)>] -> NP[NUM=?n,SEM=?subj] VP[NUM=?n,SEM=?vp]

NP[NUM=?n,SEM=<?det(?nom)> ] -> Det[NUM=?n,SEM=?det]  Nom[NUM=?n,SEM=?nom]
NP[LOC=?l,NUM=?n,SEM=?np] -> PropN[LOC=?l,NUM=?n,SEM=?np]

Nom[NUM=?n,SEM=?nom] -> N[NUM=?n,SEM=?nom]

VP[NUM=?n,SEM=?v] -> IV[NUM=?n,SEM=?v]
VP[NUM=?n,SEM=<?v(?obj)>] -> TV[NUM=?n,SEM=?v] NP[SEM=?obj]
VP[NUM=?n,SEM=<?v(?obj,?pp)>] -> DTV[NUM=?n,SEM=?v] NP[SEM=?obj] PP[+TO,SEM=?pp]

PP[+TO, SEM=?np] -> P[+TO] NP[SEM=?np]

#############################
# Lexical Rules
#############################

PropN[-LOC,NUM=sg,SEM=<\P.P(england)>] -> 'England'
PropN[-LOC,NUM=sg,SEM=<\P.P(ireland)>] -> 'Ireland'
PropN[-LOC,NUM=sg,SEM=<\P.P(scotland)>] -> 'Scotland'
PropN[-LOC,NUM=sg,SEM=<\P.P(wales)>] -> 'Wales'
PropN[-LOC,NUM=sg,SEM=<\P.P(bulgaria)>] -> 'Bulgaria'
PropN[-LOC,NUM=sg,SEM=<\P.P(newzealand)>] -> 'NewZealand'
PropN[-LOC,NUM=sg,SEM=<\P.P(newyork)>] -> 'NewYork'
PropN[-LOC,NUM=sg,SEM=<\P.P(australia)>] -> 'Australia'

Det[NUM=sg,SEM=<\P Q.all x.(P(x) -> Q(x))>] -> 'every'
Det[NUM=pl,SEM=<\P Q.all x.(P(x) -> Q(x))>] -> 'all'
Det[SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'some'
Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'a'
Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'an'

N[NUM=pl,SEM=<\x.jordan(x)>] -> 'Jordan'
N[NUM=pl,SEM=<\x.irena(x)>] -> 'Irena'
N[NUM=pl,SEM=<\x.ellie(x)>] -> 'Ellie'
N[NUM=pl,SEM=<\x.angel(x)>] -> 'Angel'
N[NUM=pl,SEM=<\x.gemma(x)>] -> 'Gemma'
N[NUM=pl,SEM=<\x.sarah(x)>] -> 'Sarah'
N[NUM=pl,SEM=<\x.jd(x)>] -> 'Jd'

N[NUM=pl,SEM=<\x.british(x)>] -> 'brits'
N[NUM=pl,SEM=<\x.newzealander(x)>] -> 'kiwis'
N[NUM=pl,SEM=<\x.australian(x)>] -> 'aussies'
N[NUM=pl,SEM=<\x.bulgarian(x)>] -> 'bulgarians'

TV[NUM=sg,SEM=<\X x.X(\y.be_in(x,y))>,TNS=pres] -> 'is_in'
TV[NUM=pl,SEM=<\X x.X(\y.be_in(x,y))>,TNS=pres] -> 'are_in'

P[+to] -> 'to'